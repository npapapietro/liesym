# name: "Pull Request Docs Check"
# on:
#   pull_request:
#     branches: [main, develop]
# env:
#   CARGO_TERM_COLOR: always
# jobs:
#   build:
#     runs-on: ${{ matrix.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         python-version: [3.7, 3.8, 3.9]
#         platform: [
#           { os: "macOS-latest",   python-architecture: "x64", rust-target: "x86_64-apple-darwin" },
#           { os: "ubuntu-latest", python-architecture: "x64", rust-target: "x86_64-unknown-linux-gnu" },
#           { os: "windows-latest", python-architecture: "x64", rust-target: "x86_64-pc-windows-msvc" },
#         ]
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v1

#       - name: Set up Python ${{ matrix.python-version }}
#         uses: actions/setup-python@v1
#         with:
#           python-version: ${{ matrix.python-version }}

#       - name: Install dependencies
#         run: |
#           python -m pip install --upgrade pip
#           pip install poetry

#       - name: Install package deps
#         run: | 
#           poetry install

#       - name: Install Rust toolchain  
#         uses: actions-rs/toolchain@v1
#         with:
#           toolchain: ${{ matrix.rust }}
#           target:  ${{ matrix.platform.rust-target }}
#           override: true

#       - if: matrix.platform.os == 'ubuntu-latest'
#         name: Prepare LD_LIBRARY_PATH (Ubuntu only)
#         run: echo LD_LIBRARY_PATH=${pythonLocation}/lib >> $GITHUB_ENV
      
#       - name: Build Python package
#         run: poetry run maturin develop --release

#       - name: Build (no features)
#         run: cargo build --no-default-features --verbose --target ${{ matrix.platform.rust-target }}

#       - name: Test
#         run: cargo test --no-default-features --target ${{ matrix.platform.rust-target }}

#       - name: pytest
#         run: poetry run pytest tests
