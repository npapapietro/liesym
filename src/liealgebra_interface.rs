use ndarray::Array;
use num::rational::Ratio;
use numpy::{IntoPyArray, PyArray3, PyReadonlyArray1, PyReadonlyArray3};
use pyo3::prelude::{pyclass, pymethods, Python};
use std::iter::FromIterator;

use crate::debug::debug_on;
use crate::matrix_methods::{all_pos, reflect_weights, reflection_matrix};
use crate::utils::{
    to_rational_list, to_rational_matrix, to_rational_vector, vecarray_to_pyreturn, Array2R,
};

#[pyclass]
pub struct LieAlgebraBackend {
    rank: usize,
    roots: usize,
    simple_roots: Vec<Array2R>,

    #[allow(dead_code)]
    cartan_matrix: Array2R,
    cartan_matrix_inverse: Array2R,

    #[allow(dead_code)]
    omega_matrix: Array2R,
    omega_matrix_inverse: Array2R,

    cocartan_matrix: Array2R,

    #[allow(dead_code)]
    positive_roots: Option<Vec<Array2R>>,
}
// Public implementations exposed in python
#[pymethods]
impl LieAlgebraBackend {
    #[new]
    fn new(
        rank: usize,
        roots: usize,
        simple_roots: PyReadonlyArray3<i64>,
        cartan_matrix: PyReadonlyArray3<i64>,
        cartan_matrix_inverse: PyReadonlyArray3<i64>,
        omega_matrix: PyReadonlyArray3<i64>,
        omega_matrix_inverse: PyReadonlyArray3<i64>,
        cocartan_matrix: PyReadonlyArray3<i64>,
    ) -> Self {
        LieAlgebraBackend {
            rank: rank,
            roots: roots,
            simple_roots: to_rational_list(simple_roots),
            cartan_matrix: to_rational_matrix(cartan_matrix),
            cartan_matrix_inverse: to_rational_matrix(cartan_matrix_inverse),
            omega_matrix: to_rational_matrix(omega_matrix),
            omega_matrix_inverse: to_rational_matrix(omega_matrix_inverse),
            cocartan_matrix: to_rational_matrix(cocartan_matrix),
            positive_roots: None,
        }
    }

    fn orbit<'py>(
        &self,
        py: Python<'py>,
        weight: PyReadonlyArray3<i64>,
        stabilizers: Option<PyReadonlyArray1<usize>>,
    ) -> (&'py PyArray3<i64>, &'py PyArray3<i64>) {
        let results = match stabilizers {
            Some(x) => self.orbit_stabilizers(
                to_rational_vector(weight),
                x.as_array().iter().map(|i| i.clone()).collect(),
            ),
            None => self.orbit_no_stabilizers(to_rational_vector(weight)),
        };
        let (numer, denom) = vecarray_to_pyreturn(results);
        (numer.into_pyarray(py), denom.into_pyarray(py))
    }

    fn root_system<'py>(&self, py: Python<'py>) -> (&'py PyArray3<i64>, &'py PyArray3<i64>) {
        if debug_on() {
            println!("Made it to root_system")
        }

        let results = self.root_system_backend();
        let (numer, denom) = vecarray_to_pyreturn(results);
        (numer.into_pyarray(py), denom.into_pyarray(py))
    }
}

/// Private implementations not exposed in python
impl LieAlgebraBackend {
    fn orbit_no_stabilizers(&self, weight: Array2R) -> Vec<Array2R> {
        if debug_on() {
            println!("Starting orbit calculated");
        }
        let mut full_orbit = self.full_orbit(self.to_dominant(weight), None);
        let rot = self.omega_matrix_inverse.dot(&self.cartan_matrix_inverse);

        // Sorting by rotating and sum value
        full_orbit.sort_by(|a, b| self.root_level(a, &rot).cmp(&self.root_level(b, &rot)));

        full_orbit
    }

    /// Returns the orbit for weight stabilized around some simple roots.
    ///
    /// # Arguments
    /// * `weight` - The weight to generate the orbit about.
    /// * `stablizers` - A vector of indexes corresponding to the simple roots.
    ///
    fn orbit_stabilizers(&self, weight: Array2R, stablizers: Vec<usize>) -> Vec<Array2R> {
        let mut full_orbit = self.full_orbit(self.to_dominant(weight), Some(stablizers));
        let rot = self.omega_matrix_inverse.dot(&self.cartan_matrix_inverse);
        full_orbit.sort_by(|a, b| self.root_level(a, &rot).cmp(&self.root_level(b, &rot)));

        full_orbit
    }

    /// Returns the reflection matrices generated by the simple roots
    fn reflection_matrices(&self) -> Vec<Array2R> {
        self.simple_roots.iter().map(reflection_matrix).collect()
    }

    /// Returns the reflected weights/roots by stabilizers
    ///
    /// # Arguments
    /// * `weights` - Vec of weights to generate reflections about
    /// * `stabilizers` - Optional list of indexes matching simple root generated reflection matrices.
    fn reflect_weights(
        &self,
        weights: Vec<Array2R>,
        stablizers: Option<Vec<usize>>,
    ) -> Vec<Array2R> {
        let reflection_matrices = self.reflection_matrices();
        let ref_mats = match stablizers {
            Some(x) => x.iter().map(|i| reflection_matrices[*i].clone()).collect(),
            None => reflection_matrices,
        };

        reflect_weights(&weights, &ref_mats)
    }

    /// Integer root level for a weight `x`
    fn root_level<'a>(&self, x: &'a Array2R, rot: &'a Array2R) -> Ratio<i64> {
        x.dot(&self.cartan_matrix_inverse).dot(rot).sum()
    }

    /// Returns a list of either count 1 or 0 with the dominant weight
    /// if it exists in the list
    fn find_dom<'a>(&self, arrays: &'a Vec<Array2R>) -> Vec<Array2R> {
        for i in arrays.iter() {
            if all_pos(&i.dot(&self.omega_matrix_inverse)) {
                return vec![i.clone()];
            }
        }
        Vec::new()
    }

    /// Returns the dominant weight by rotating across
    /// weyl chambers
    fn to_dominant(&self, weight: Array2R) -> Array2R {
        let mut orbits = vec![weight];
        loop {
            orbits = self.reflect_weights(orbits, None);
            let dom = self.find_dom(&orbits);
            if dom.len() > 0 {
                break (&dom[0]).clone();
            }
        }
    }

    /// Returns the full orbit with optional stabilization for the weight
    fn full_orbit(&self, weight: Array2R, stablizers: Option<Vec<usize>>) -> Vec<Array2R> {
        let mut orbit = vec![weight];
        for _ in 0..(self.roots / 2) {
            orbit = self.reflect_weights(orbit, stablizers.clone());
        }
        orbit
    }

    fn root_system_backend(&self) -> Vec<Array2R> {
        let mut roots = Vec::new();
        for i in self.simple_roots.iter() {
            let orbit = self.orbit_no_stabilizers(i.clone());
            roots.extend(orbit.iter().cloned());
        }

        roots = roots.iter().map(|x| x.dot(&self.cocartan_matrix)).collect();

        for _ in 0..self.rank {
            roots.push(Array::zeros((1, self.rank)));
        }
        let rot = self.omega_matrix_inverse.dot(&self.cartan_matrix_inverse);
        roots.sort_by(|a, b| {
            self.root_level(a, &rot)
                .cmp(&self.root_level(b, &rot))
                .then(Vec::from_iter(a.iter().clone()).cmp(&Vec::from_iter(b.iter().clone())))
        });

        roots
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use crate::utils::test::{get_np_locals, py3darray};

    fn python_strings() -> (usize, usize, String, String, String, String, String, String) {
        let rank = 3;
        let roots = 12;
        let simple_roots_str =
            "[[[1,1],[-1,1],[0,1],[0,1]],[[0,1],[1,1],[-1,1],[0,1]],[[0,1],[0,1],[1,1],[-1,1]]]"
                .to_string();
        let cartan_matrix_str =
            "[[[2,1],[-1,1],[0,1]],[[-1,1],[2,1],[-1,1]],[[0,1],[-1,1],[2,1]]]".to_string();
        let cartan_matrix_inv_str =
            "[[[3,4],[1,2],[1,4]],[[1,2],[1,1],[1,2]],[[1,4],[1,2],[3,4]]]".to_string();
        let omega_matrix_str =
            "[[[3,4],[-1,4],[-1,4],[-1,4]],[[1,2],[1,2],[-1,2],[-1,2]],[[1,4],[1,4],[1,4],[-3,4]]]"
                .to_string();
        let omega_matrix_inv_str =
            "[[[1,1],[0,1],[0,1]],[[-1,1],[1,1],[0,1]],[[0,1],[-1,1],[1,1]],[[0,1],[0,1],[-1,1]]]"
                .to_string();
        let cocartan_matrix_str =
            "[[[1,1],[-1,1],[0,1],[0,1]],[[0,1],[1,1],[-1,1],[0,1]],[[0,1],[0,1],[1,1],[-1,1]]]"
                .to_string();

        (
            rank,
            roots,
            simple_roots_str,
            cartan_matrix_str,
            cartan_matrix_inv_str,
            omega_matrix_str,
            omega_matrix_inv_str,
            cocartan_matrix_str,
        )
    }

    #[test]
    fn test_liealgebrabackend_new() {
        let gil = Python::acquire_gil();
        let py = gil.python();

        let (
            rank,
            roots,
            simple_roots_str,
            cartan_matrix_str,
            cartan_matrix_inv_str,
            omega_matrix_str,
            omega_matrix_inv_str,
            cocartan_matrix_str,
        ) = python_strings();

        let simple_roots = py3darray(py, simple_roots_str).readonly();
        let cartan_matrix = py3darray(py, cartan_matrix_str).readonly();
        let cartan_matrix_inv = py3darray(py, cartan_matrix_inv_str).readonly();
        let omega_matrix = py3darray(py, omega_matrix_str).readonly();
        let omega_matrix_inv = py3darray(py, omega_matrix_inv_str).readonly();
        let cocartan_matrix = py3darray(py, cocartan_matrix_str).readonly();

        LieAlgebraBackend::new(
            rank,
            roots,
            simple_roots,
            cartan_matrix,
            cartan_matrix_inv,
            omega_matrix,
            omega_matrix_inv,
            cocartan_matrix
        );
    }

    // fn to_ratio<D>(x: Array<i64, D>) -> Array<Ratio<i64>, D>
    // where
    //     D: Dimension,
    // {
    //     x.mapv(|x| Ratio::new(x, 1))
    // }

    // #[test]
    // fn test_orbit() {
    //     let half: num::rational::Ratio<i64> = Ratio::new(1, 2);

    //     let simple_roots = vec![
    //         to_ratio(array![[1, -1, 0, 0]]),
    //         to_ratio(array![[0, 1, -1, 0]]),
    //         to_ratio(array![[0, 0, 1, 0]]),
    //         array![[-half, -half, -half, -half]],
    //     ];
    //     let cartan_inv = to_ratio(array![
    //         [2, 3, 4, 2],
    //         [3, 6, 8, 4],
    //         [2, 4, 6, 3],
    //         [1, 2, 3, 2]
    //     ]);
    //     let omega_inv = to_ratio(array![
    //         [1, 0, 0, -1],
    //         [-1, 1, 0, -1],
    //         [0, -1, 2, -1],
    //         [0, 0, 0, -1]
    //     ]);
    //     let weight = to_ratio(array![[1, -1, 0, 0]]);

    //     let orb = OrbitMethods {
    //         simple_roots: simple_roots,
    //         cartan_inv: cartan_inv,
    //         omega_inv: omega_inv,
    //         omega: Array2R::zeros((1, 1)),
    //         cocartan_t: Array2R::zeros((1, 1)),
    //         n_roots: 48,
    //         rank: 4,
    //     };

    //     let res = orb.orbit(weight);
    //     assert_eq!(res.len(), 24);
    // }

    // #[test]
    // fn test_orbit_to_dom() {
    //     let half: num::rational::Ratio<i64> = Ratio::new(1, 2);

    //     let simple_roots = vec![
    //         to_ratio(array![[1, -1, 0, 0]]),
    //         to_ratio(array![[0, 1, -1, 0]]),
    //         to_ratio(array![[0, 0, 1, 0]]),
    //         array![[-half, -half, -half, -half]],
    //     ];
    //     let cartan_inv = to_ratio(array![
    //         [2, 3, 4, 2],
    //         [3, 6, 8, 4],
    //         [2, 4, 6, 3],
    //         [1, 2, 3, 2]
    //     ]);
    //     let omega_inv = to_ratio(array![
    //         [1, 0, 0, -1],
    //         [-1, 1, 0, -1],
    //         [0, -1, 2, -1],
    //         [0, 0, 0, -1]
    //     ]);

    //     let orb = OrbitMethods {
    //         simple_roots: simple_roots,
    //         cartan_inv: cartan_inv,
    //         omega_inv: omega_inv,
    //         omega: Array2R::zeros((1, 1)),
    //         cocartan_t: Array2R::zeros((1, 1)),
    //         n_roots: 48,
    //         rank: 4,
    //     };

    //     let non_dom = to_ratio(array![[0, 1, 1, 0i64]]);
    //     let result = orb.to_dominant(non_dom);

    //     assert_eq!(result, to_ratio(array![[1, 0, 0, -1i64]]));
    // }
}
